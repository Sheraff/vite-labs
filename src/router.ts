// generated by file-router
/* eslint-disable */
import { type JSX, lazy } from "react"
import wave_function_collapse_ascii_image from "./pages/wave-function-collapse-ascii/screen.png"
import wave_function_collapse_image from "./pages/wave-function-collapse/screen.png"
import visual_exec_image from "./pages/visual-exec/screen.png"
import swarm_pathfinding_image from "./pages/swarm-pathfinding/screen.png"
import star_rating_image from "./pages/star-rating/screen.png"
import spring_fluid_image from "./pages/spring-fluid/screen.png"
import spider_inverse_kinematics_image from "./pages/spider-inverse-kinematics/screen.png"
import quad_tree_collisions_image from "./pages/quad-tree-collisions/screen.png"
import quad_tree_image from "./pages/quad-tree/screen.png"
import pong_pang_image from "./pages/pong-pang/screen.png"
import polka_fireflies_image from "./pages/polka-fireflies/screen.png"
import perlin_ripples_image from "./pages/perlin-ripples/screen.png"
import particle_life_image from "./pages/particle-life/screen.png"
import paint_worklet_image from "./pages/paint-worklet/screen.png"
import normal_map_image from "./pages/normal-map/screen.png"
import neat_image from "./pages/neat/screen.png"
import minesweeper_image from "./pages/minesweeper/screen.png"
import maze_generation_image from "./pages/maze-generation/screen.png"
import lightning_image from "./pages/lightning/screen.png"
import intl_tuesday_image from "./pages/intl-tuesday/screen.png"
import hex_a_star_image from "./pages/hex-a-star/screen.png"
import hacker_background_image from "./pages/hacker-background/screen.png"
import fourrier_series_image from "./pages/fourrier-series/screen.png"
import flow_field_image from "./pages/flow-field/screen.png"
import flask_image from "./pages/flask/screen.png"
import deterministic_plinko_image from "./pages/deterministic-plinko/screen.png"
import cursor_projection_image from "./pages/cursor-projection/screen.png"
import collision_threads_image from "./pages/collision-threads/screen.png"
import boids_image from "./pages/boids/screen.png"
import bird_inverse_kinematics_image from "./pages/bird-inverse-kinematics/screen.png"
import ants_shader_image from "./pages/ants-shader/screen.png"
import ants_image from "./pages/ants/screen.png"
import a_star_image from "./pages/a-star/screen.png"

export type Routes = "wave-function-collapse-ascii" | "wave-function-collapse" | "visual-exec" | "swarm-pathfinding" | "star-rating" | "spring-fluid" | "spider-inverse-kinematics" | "quad-tree-collisions" | "quad-tree" | "pong-pang" | "polka-fireflies" | "perlin-ripples" | "particle-life" | "paint-worklet" | "normal-map" | "neat" | "modern-modal" | "minesweeper" | "maze-generation" | "lightning" | "intl-tuesday" | "hex-a-star" | "hacker-background" | "grainy-texture" | "fragment-portal" | "fourrier-series" | "flow-field" | "flask" | "deterministic-plinko" | "cursor-projection" | "collision-threads" | "cellular-automata" | "boids" | "bird-inverse-kinematics" | "ants-shader" | "ants" | "a-star"

export type RouteMeta = {
	title: string
	image?: string
	description?: string
	tags?: string[]
}

export type GitMeta = {
	lastModified: number
	firstAdded: number
}

export type Route = {
	Component: React.LazyExoticComponent<() => JSX.Element>
	meta: RouteMeta
	git: GitMeta
}

export const ROUTES = {
	"wave-function-collapse-ascii": {
		Component: lazy(() => import("./pages/wave-function-collapse-ascii/index.tsx")),
		meta: {
			title: 'Ascii wave function collapse',
			image: wave_function_collapse_ascii_image,
			tags: ['procedural', 'random', 'ascii']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1740479450000
		},
	},
	"wave-function-collapse": {
		Component: lazy(() => import("./pages/wave-function-collapse/index.tsx")),
		meta: {
			title: 'Wave Function Collapse',
			image: wave_function_collapse_image,
			tags: ['procedural', 'random']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1727995709000
		},
	},
	"visual-exec": {
		Component: lazy(() => import("./pages/visual-exec/index.tsx")),
		meta: {
			title: 'Visual Exec (WIP)',
			image: visual_exec_image
		},
		git: {
			lastModified: 1761070823000,
			firstAdded: 1760983403000
		},
	},
	"swarm-pathfinding": {
		Component: lazy(() => import("./pages/swarm-pathfinding/index.tsx")),
		meta: {
			title: 'Swarm Pathfinding',
			image: swarm_pathfinding_image,
			tags: ['pathfinding', 'performance']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1741025883000
		},
	},
	"star-rating": {
		Component: lazy(() => import("./pages/star-rating/index.tsx")),
		meta: {
			title: 'Star Rating',
			image: star_rating_image,
			tags: ['html', 'components', 'wip']
		},
		git: {
			lastModified: 1759587108000,
			firstAdded: 1744563053000
		},
	},
	"spring-fluid": {
		Component: lazy(() => import("./pages/spring-fluid/index.tsx")),
		meta: {
			title: 'Spring fluid',
			description: 'A fluid simulation based on a spring-mass system, on the GPU. Click and drag to introduce disturbances. Warning: flashing lights.',
			image: spring_fluid_image,
			tags: ['webgl', 'fluid', 'shader', 'physics'],
		},
		git: {
			lastModified: 1760297097000,
			firstAdded: 1760259852000
		},
	},
	"spider-inverse-kinematics": {
		Component: lazy(() => import("./pages/spider-inverse-kinematics/index.tsx")),
		meta: {
			title: 'Spider Inverse Kinematics',
			image: spider_inverse_kinematics_image,
			tags: ['animation', 'procedural']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1717364036000
		},
	},
	"quad-tree-collisions": {
		Component: lazy(() => import("./pages/quad-tree-collisions/index.tsx")),
		meta: {
			title: 'Quad Tree Collisions',
			image: quad_tree_collisions_image,
			tags: ['data structures', 'performance']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1740318342000
		},
	},
	"quad-tree": {
		Component: lazy(() => import("./pages/quad-tree/index.tsx")),
		meta: {
			title: 'Quad Tree',
			image: quad_tree_image,
			tags: ['data structures', '101']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1717339261000
		},
	},
	"pong-pang": {
		Component: lazy(() => import("./pages/pong-pang/index.tsx")),
		meta: {
			title: 'Pong Pang',
			image: pong_pang_image,
			tags: ['game']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1717337533000
		},
	},
	"polka-fireflies": {
		Component: lazy(() => import("./pages/polka-fireflies/index.tsx")),
		meta: {
			title: 'Polka Fireflies',
			image: polka_fireflies_image
		
		},
		git: {
			lastModified: 1761215576000,
			firstAdded: 1761173482000
		},
	},
	"perlin-ripples": {
		Component: lazy(() => import("./pages/perlin-ripples/index.tsx")),
		meta: {
			title: 'Perlin ripples',
			image: perlin_ripples_image,
			tags: ['random', 'animation']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1721823247000
		},
	},
	"particle-life": {
		Component: lazy(() => import("./pages/particle-life/index.tsx")),
		meta: {
			title: 'Particle Life',
			image: particle_life_image,
			tags: ['simulation', 'canvas', 'particles'],
		},
		git: {
			lastModified: 1760957845000,
			firstAdded: 1760880322000
		},
	},
	"paint-worklet": {
		Component: lazy(() => import("./pages/paint-worklet/index.tsx")),
		meta: {
			title: 'Paint Worklet',
			image: paint_worklet_image,
			tags: ['css']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1717321960000
		},
	},
	"normal-map": {
		Component: lazy(() => import("./pages/normal-map/index.tsx")),
		meta: {
			title: 'Normal Map',
			image: normal_map_image,
			tags: ['webgl', 'lighting']
		},
		git: {
			lastModified: 1760191038000,
			firstAdded: 1742666916000
		},
	},
	"neat": {
		Component: lazy(() => import("./pages/neat/index.tsx")),
		meta: {
			title: 'N.E.A.T',
			description: `
				NeuroEvolution of Augmenting Topologies. A genetic algorithm that evolves neural networks to solve a task
				(here: collect as many orange dots as possible). Every generation, we simulate 2000 entities,
				each with a genome (a neural network). After a time, we select the best 1% of entities and create
				a new generation by copying them and mutating them.
			`,
			image: neat_image,
			tags: ['simulation', 'genetic algorithm', 'neural network']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1741456619000
		},
	},
	"modern-modal": {
		Component: lazy(() => import("./pages/modern-modal/index.tsx")),
		meta: {
			title: 'Modern Modal',
			tags: ['html', 'components']
		},
		git: {
			lastModified: 1759674908000,
			firstAdded: 1717538613000
		},
	},
	"minesweeper": {
		Component: lazy(() => import("./pages/minesweeper/index.tsx")),
		meta: {
			title: 'Minesweeper',
			image: minesweeper_image,
			tags: ['game']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1738530954000
		},
	},
	"maze-generation": {
		Component: lazy(() => import("./pages/maze-generation/index.tsx")),
		meta: {
			title: 'Maze Generation',
			image: maze_generation_image,
			tags: ['algorithm', 'procedural']
		},
		git: {
			lastModified: 1760980166000,
			firstAdded: 1760825464000
		},
	},
	"lightning": {
		Component: lazy(() => import("./pages/lightning/index.tsx")),
		meta: {
			title: 'Lightning',
			image: lightning_image,
			tags: ['animation']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1717331001000
		},
	},
	"intl-tuesday": {
		Component: lazy(() => import("./pages/intl-tuesday/index.tsx")),
		meta: {
			title: 'Intl Tuesday',
			image: intl_tuesday_image,
			tags: ['Intl', 'locales']
		},
		git: {
			lastModified: 1759673611000,
			firstAdded: 1759672364000
		},
	},
	"hex-a-star": {
		Component: lazy(() => import("./pages/hex-a-star/index.tsx")),
		meta: {
			title: 'Hexagonal A*',
			image: hex_a_star_image,
			tags: ['pathfinding', 'data structures']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1740491184000
		},
	},
	"hacker-background": {
		Component: lazy(() => import("./pages/hacker-background/index.tsx")),
		meta: {
			title: 'Hacker Background',
			image: hacker_background_image,
			tags: ['animation', 'ascii']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1739742825000
		},
	},
	"grainy-texture": {
		Component: lazy(() => import("./pages/grainy-texture/index.tsx")),
		meta: {
			title: 'Grainy Texture',
			tags: ['css', 'svg', 'wip'],
		},
		git: {
			lastModified: 1759587155000,
			firstAdded: 1741450768000
		},
	},
	"fragment-portal": {
		Component: lazy(() => import("./pages/fragment-portal/index.tsx")),
		meta: {
			title: 'Fragment Portal',
			tags: ['react']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1717340075000
		},
	},
	"fourrier-series": {
		Component: lazy(() => import("./pages/fourrier-series/index.tsx")),
		meta: {
			title: 'Fourrier Series',
			tags: ['animation', 'music'],
			image: fourrier_series_image
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1752508497000
		},
	},
	"flow-field": {
		Component: lazy(() => import("./pages/flow-field/index.tsx")),
		meta: {
			title: 'Flow Field',
			image: flow_field_image,
			tags: ['pathfinding', 'performance']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1740833468000
		},
	},
	"flask": {
		Component: lazy(() => import("./pages/flask/index.tsx")),
		meta: {
			title: 'Flask',
			image: flask_image,
			tags: ['animation', 'css']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1737497494000
		},
	},
	"deterministic-plinko": {
		Component: lazy(() => import("./pages/deterministic-plinko/index.tsx")),
		meta: {
			title: 'Deterministic Plinko',
			image: deterministic_plinko_image,
			tags: ['game', 'physics', 'simulation']
		},
		git: {
			lastModified: 1760864627000,
			firstAdded: 1760809990000
		},
	},
	"cursor-projection": {
		Component: lazy(() => import("./pages/cursor-projection/index.tsx")),
		meta: {
			title: '3D Cursor Projection',
			image: cursor_projection_image,
			tags: ['perspective', 'css', 'projection']
		},
		git: {
			lastModified: 1759672738000,
			firstAdded: 1759672720000
		},
	},
	"collision-threads": {
		Component: lazy(() => import("./pages/collision-threads/index.tsx")),
		meta: {
			title: 'Collision Threads',
			image: collision_threads_image,
			tags: ['simulation', 'performance', 'physics']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1740501679000
		},
	},
	"cellular-automata": {
		Component: lazy(() => import("./pages/cellular-automata/index.tsx")),
		meta: {
			title: 'Cellular Automata',
			tags: ['wip']
		},
		git: {
			lastModified: 1752584880000,
			firstAdded: 1752407483000
		},
	},
	"boids": {
		Component: lazy(() => import("./pages/boids/index.tsx")),
		meta: {
			title: 'Boids',
			description: `
				Boids is an artificial life program which simulates the flocking behaviour of birds.
				It is an example of emergent behavior; that is, the complexity of Boids arises from the interaction of individual agents adhering to a set of simple rules.
			`,
			image: boids_image,
			tags: ['simulation', 'animation', 'performance']
		},
		git: {
			lastModified: 1752579378000,
			firstAdded: 1752336310000
		},
	},
	"bird-inverse-kinematics": {
		Component: lazy(() => import("./pages/bird-inverse-kinematics/index.tsx")),
		meta: {
			title: 'Bird Inverse Kinematics',
			image: bird_inverse_kinematics_image,
			tags: ['animation', 'procedural']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1717365547000
		},
	},
	"ants-shader": {
		Component: lazy(() => import("./pages/ants-shader/index.tsx")),
		meta: {
			title: 'Ants on shader',
			tags: ['simulation', 'performance', 'webgl', 'shader'],
			image: ants_shader_image
		},
		git: {
			lastModified: 1760207398000,
			firstAdded: 1742739684000
		},
	},
	"ants": {
		Component: lazy(() => import("./pages/ants/index.tsx")),
		meta: {
			title: 'Ants',
			image: ants_image,
			tags: ['simulation', 'performance']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1728081821000
		},
	},
	"a-star": {
		Component: lazy(() => import("./pages/a-star/index.tsx")),
		meta: {
			title: 'A*',
			image: a_star_image,
			tags: ['pathfinding', '101']
		},
		git: {
			lastModified: 1752533354000,
			firstAdded: 1740478315000
		},
	}
} as const satisfies Record<Routes, Route>
